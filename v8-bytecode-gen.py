#!/usr/bin/env python3
import os
import subprocess
import sys
import json

d8_exe = os.environ["JSJIT_D8_BIN"]
if d8_exe == None:
    print("$JSJIT_D8_BIN environment variable not set")
    exit(1)

if len(sys.argv) < 2:
    print("Usage: v8-bytecode-gen.py <.js file>")
    exit(1)

src_file_path = sys.argv[1]

result = subprocess.run(
    [d8_exe, "--print-bytecode", src_file_path], stdout=subprocess.PIPE
)
d8_out = result.stdout.decode("utf-8")

bc = []
bc_offset = 0

for line in d8_out.splitlines():
    if line.startswith("[generated bytecode for function:"):
        # We can get the function name here
        pass
    elif (
        line.startswith("Bytecode length")
        or line.startswith("Parameter count")
        or line.startswith("Register count")
        or line.startswith("Frame size")
        or line.startswith("Constant pool")
        or line.startswith("Handler Table")
    ):
        # Ignore these lines
        pass
    elif line.startswith("Source Position Table"):
        # maybe the last line?
        break
    else:
        # This is a bytecode line
        hex_seq = line.split(":")[1].lstrip().split("  ")[0]
        hexes = hex_seq.split(" ")
        op = int(hexes[0], 16)
        # print("op", op)
        bc.append(op)


json_out = {"functions": [{"name": "", "bytecode": bc}]}
out_file = src_file_path.split(".js")[0] + ".bc.json"
f = open(out_file, "w")
json.dump(json_out, f)
